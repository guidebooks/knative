"use strict";(self.webpackChunkKuiClientTemplate=self.webpackChunkKuiClientTemplate||[]).push([[39530],{83211:(n,e,t)=>{t.r(e),t.d(e,{default:()=>i});const i='---\ntitle: Knative &mdash; Getting Started\nlayout:\n    1: left\n    default: wizard\nwizard:\n    steps:\n        - match: Install Knative using quickstart\n          name: Introduction\n        - Before you begin\n        - name: Prepare local Kubernetes cluster\n          description: Using kind or minikube can help you isolate your Knative learning experiments.\n        - Install the Knative CLI\n        - name: Install the Knative quickstart plugin\n          description: This gives you a kn quickstart command\n        - name: Run the Knative quickstart plugin\n          description: This will quickly set up Knative against kind or minikube\n        - Next steps\ncodeblocks:\n    - match: ^brew install kn$\n      validate: brew info kn\n    - match: ^brew install knative-sandbox/kn-plugins/quickstart$\n      validate: kn quickstart --help\n    - match: brew upgrade\n      optional: true\n    - match: kn quickstart --help\n      optional: true\n---\n\n[![Knative logo](https://knative.dev/docs/images/logo/rgb/knative-logo-rgb.png)](https://knative.dev)\n\n# Knative\n\n[Knative](https://knative.dev) is enterprise-grade Serverless on\nyour own terms, a Kubernetes-based platform to deploy and manage\nmodern serverless workloads.\n\nKnative components build on top of\n[Kubernetes](https://kubernetes.io/), abstracting away the complex\ndetails and enabling developers to focus on what matters. Built by\ncodifying the best practices shared by successful real-world\nimplementations, Knative solves the "boring but difficult" parts of\ndeploying and managing cloud native services so you don\'t have to.\n\n\x3c!-- oof, there is no great way of using markdown to specify a desired image size --\x3e\n\n<a href="https://github.com/knative">\n  <img alt="Github Logo" src="https://avatars.githubusercontent.com/u/26377421?v=4" width="40">\n</a>\n\n---\n\n# Getting started with Knative\n\nThis guidebook helps you install Knative on a `kind` or `minikube` cluster.\n\n---\n\n# Install Knative using quickstart\n\nThis topic describes how to install a local deployment of Knative Serving and\nEventing using the Knative `quickstart` plugin.\n\nThe plugin installs a preconfigured Knative deployment on a local Kubernetes cluster.\n\n!!! warning\n    Knative `quickstart` environments are for experimentation use only.\n    For a production ready installation, see the [YAML-based installation](/docs/install/yaml-install/)\n    or the [Knative Operator installation](/docs/install/operator/knative-with-operators/).\n\n## Before you begin\n\nBefore you can get started with a Knative `quickstart` deployment you must install:\n\n- [kind](https://kind.sigs.k8s.io/docs/user/quick-start){target=_blank} (Kubernetes in Docker)\nor [minikube](https://minikube.sigs.k8s.io/docs/start/){target=_blank} to enable\nyou to run a local Kubernetes cluster with Docker container nodes.\n- The [Kubernetes CLI (`kubectl`)](https://kubernetes.io/docs/tasks/tools/install-kubectl){target=_blank}\nto run commands against Kubernetes clusters.\nYou can use `kubectl` to deploy applications, inspect and manage cluster resources, and view logs.\n- The Knative CLI (`kn`) v0.25 or later. For instructions, see the next section.\n\n### Install the Knative CLI\n\nThe Knative CLI (`kn`) provides a quick and easy interface for creating Knative resources, such as Knative Services and Event Sources, without the need to create or modify YAML files directly.\n\nThe `kn` CLI also simplifies completion of otherwise complex procedures such as autoscaling and traffic splitting.\n\n=== "Using Homebrew"\n\n    Do one of the following:\n\n    - To install `kn` by using [Homebrew](https://brew.sh){target=_blank}, run the command:\n\n        ```bash\n        brew install kn\n        ```\n\n    - To upgrade an existing `kn` install to the latest version, run the command:\n\n        ```bash\n        brew upgrade kn\n        ```\n\n        ??? bug "Having issues upgrading `kn` using Homebrew?"\n\n            If you are having issues upgrading using Homebrew, it might be due to a change to a CLI repository where the `master` branch was renamed to `main`. Resolve this issue by running the command:\n\n            ```bash\n            brew tap --repair\n            brew update\n            brew upgrade kn\n            ```\n\n=== "Using a binary"\n\n    You can install `kn` by downloading the executable binary for your system and placing it in the system path. Note that you will need `kn` v0.25 or later.\n\n    1. Download the binary for your system from the [`kn` release page](https://github.com/knative/client/releases){target=_blank}.\n\n    1. Rename the binary to `kn` and make it executable by running the commands:\n\n        ```bash\n        mv <path-to-binary-file> kn\n        chmod +x kn\n        ```\n\n        Where `<path-to-binary-file>` is the path to the binary file you downloaded in the previous step, for example, `kn-darwin-amd64` or `kn-linux-amd64`.\n\n    1. Move the executable binary file to a directory on your PATH by running the command:\n\n        ```bash\n        mv kn /usr/local/bin\n        ```\n\n    1. Verify that the plugin is working by running the command:\n\n        ```bash\n        kn version\n        ```\n\n=== "Using Go"\n\n    1. Check out the `kn` client repository:\n\n          ```bash\n          git clone https://github.com/knative/client.git\n          cd client/\n          ```\n\n    1. Build an executable binary:\n\n          ```bash\n          hack/build.sh -f\n          ```\n\n    1. Move `kn` into your system path, and verify that `kn` commands are working properly. For example:\n\n          ```bash\n          kn version\n          ```\n\n=== "Using a container image"\n\n    Links to images are available here:\n\n    - [Latest release](https://gcr.io/knative-releases/knative.dev/client/cmd/kn){target=_blank}\n\n    You can run `kn` from a container image. For example:\n\n    ```bash\n    docker run --rm -v "$HOME/.kube/config:/root/.kube/config" gcr.io/knative-releases/knative.dev/client/cmd/kn:latest service list\n    ```\n\n    !!! note\n        Running `kn` from a container image does not place the binary on a permanent path. This procedure must be repeated each time you want to use `kn`.\n\n## Install the Knative quickstart plugin\n\nTo get started, install the Knative `quickstart` plugin:\n\n=== "Using Homebrew"\n\n    Do one of the following:\n\n    - To install the `quickstart` plugin by using [Homebrew](https://brew.sh){target=_blank}, run the command:\n\n        ```bash\n        brew install knative-sandbox/kn-plugins/quickstart\n        ```\n\n    - To upgrade an existing `quickstart` install to the latest version, run the command:\n\n        ```bash\n        brew upgrade knative-sandbox/kn-plugins/quickstart\n        ```\n=== "Using a binary"\n    1. Download the executable binary for your system from the [`quickstart` release page](https://github.com/knative-sandbox/kn-plugin-quickstart/releases){target=_blank}.\n\n    1. Move the executable binary file to a directory on your `PATH`, for example, in `/usr/local/bin`.\n\n    1. Verify that the plugin is working, for example:\n\n        ```bash\n        kn quickstart --help\n        ```\n\n=== "Using Go"\n    1. Check out the `kn-plugin-quickstart` repository:\n\n          ```bash\n          git clone https://github.com/knative-sandbox/kn-plugin-quickstart.git\n          cd kn-plugin-quickstart/\n          ```\n\n    1. Build an executable binary:\n\n          ```bash\n          hack/build.sh\n          ```\n\n    1. Move the executable binary file to a directory on your `PATH`:\n\n          ```bash\n          mv kn-quickstart /usr/local/bin\n          ```\n\n     1. Verify that the plugin is working, for example:\n\n          ```bash\n          kn quickstart --help\n          ```\n\n## Run the Knative quickstart plugin\n\nThe `quickstart` plugin completes the following functions:\n\n1. **Checks if you have the selected Kubernetes instance installed**\n1. **Creates a cluster called `knative`**\n1. **Installs Knative Serving** with Kourier as the default networking layer, and sslip.io as the DNS\n1. **Installs Knative Eventing** and creates an in-memory Broker and Channel implementation\n\n\nTo get a local deployment of Knative, run the `quickstart` plugin:\n\n=== "Using kind"\n\n    1. Install Knative and Kubernetes on a local Docker daemon by running:\n\n        ```bash\n        kn quickstart kind\n        ```\n\n    1. After the plugin is finished, verify you have a cluster called `knative`:\n\n        ```bash\n        kind get clusters\n        ```\n\n=== "Using minikube"\n\n    1. Install Knative and Kubernetes in a minikube instance by running:\n\n        ```bash\n        kn quickstart minikube\n        ```\n\n    1. After the plugin is finished, verify you have a cluster called `knative`:\n\n        ```bash\n        minikube profile list\n        ```\n    1. To finish setting up networking for minikube, start the `minikube tunnel` process in a separate terminal window:\n        ```bash\n        minikube tunnel --profile knative\n        ```\n        The tunnel must continue to run in a terminal window while you are using your Knative `quickstart` environment.\n\n        !!! note\n            To terminate the process and clean up network routes, enter `Ctrl-C`.\n            For more information about the `minikube tunnel` command, see the [minikube documentation](https://minikube.sigs.k8s.io/docs/handbook/accessing/#using-minikube-tunnel).\n\n## Next steps\n\nNow you\'ve installed Knative, learn how to deploy your first Service in the\nnext topic in this tutorial.\n\n\x3c!-- This is a demonstration of including unmodified markdown content, and overlaying a wizard --\x3e\n'}}]);