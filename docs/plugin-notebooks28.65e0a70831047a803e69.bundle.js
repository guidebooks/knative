"use strict";(self.webpackChunkKuiClientTemplate=self.webpackChunkKuiClientTemplate||[]).push([[89774],{85263:(e,n,t)=>{t.r(n),t.d(n,{default:()=>r});const r='---\ntitle: Knative &mdash; Creating your first Trigger\nlayout:\n    1: left\n---\n\n[![Knative logo](https://knative.dev/docs/images/logo/rgb/knative-logo-rgb.png)](https://knative.dev)\n\n# Knative\n\n[Knative](https://knative.dev) is enterprise-grade Serverless on\nyour own terms, a Kubernetes-based platform to deploy and manage\nmodern serverless workloads.\n\nKnative components build on top of\n[Kubernetes](https://kubernetes.io/), abstracting away the complex\ndetails and enabling developers to focus on what matters. Built by\ncodifying the best practices shared by successful real-world\nimplementations, Knative solves the "boring but difficult" parts of\ndeploying and managing cloud native services so you don\'t have to.\n\n\x3c!-- oof, there is no great way of using markdown to specify a desired image size --\x3e\n\n<a href="https://github.com/knative">\n  <img alt="Github Logo" src="https://avatars.githubusercontent.com/u/26377421?v=4" width="40">\n</a>\n\n---\n\n# Using Triggers and sinks\n\nIn the last topic we used the CloudEvents Player as an event source to send events to the Broker.\nWe now want the event to go from the Broker to an event sink.\n\nIn this topic, we will use the CloudEvents Player as the sink as well as a source.\nThis means we will be using the CloudEvents Player to both send and receive events.\nWe will use a Trigger to listen for events in the Broker to send to the sink.\n\n## Creating your first Trigger\n\nCreate a Trigger that listens for CloudEvents from the event source and places them into the sink, which is also the CloudEvents Player app.\n\n=== "kn"\n\n    To create the Trigger, run the command:\n    ```bash\n    kn trigger create cloudevents-trigger --sink cloudevents-player  --broker example-broker\n    ```\n    !!! Success "Expected output"\n        ```{ .bash .no-copy }\n        Trigger \'cloudevents-trigger\' successfully created in namespace \'default\'.\n        ```\n\n=== "YAML"\n\n    1. Copy the following YAML into a file named `ce-trigger.yaml`:\n        ```bash\n        apiVersion: eventing.knative.dev/v1\n        kind: Trigger\n        metadata:\n          name: cloudevents-trigger\n          annotations:\n            knative-eventing-injection: enabled\n        spec:\n          broker: example-broker\n          subscriber:\n            ref:\n              apiVersion: serving.knative.dev/v1\n              kind: Service\n              name: cloudevents-player\n        ```\n\n    1. Create the Trigger by running the command:\n        ```bash\n        kubectl apply -f ce-trigger.yaml\n        ```\n\n        !!! Success "Expected output"\n            ```{ .bash .no-copy }\n            trigger.eventing.knative.dev/cloudevents-trigger created\n            ```\n\n??? question "What CloudEvents is my Trigger listening for?"\n    Because we didn\'t specify a `--filter` in our `kn` command, the Trigger is listening for any CloudEvents coming into the Broker.\n\n    The expand the next note to see how to use Filters.\n\nNow, when we go back to the CloudEvents Player and send an event, we see that CloudEvents are both sent and received by the CloudEvents Player:\n\n![CloudEvents Player user interface](https://raw.githubusercontent.com/knative/docs/main/docs/getting-started/images/event_received.png){draggable=false}\n\nYou may need to refresh the page to see your changes.\n\n??? question "What if I want to filter on CloudEvent attributes?"\n    First, delete your existing Trigger:\n    ```bash\n      kn trigger delete cloudevents-trigger\n    ```\n    Now let\'s add a Trigger that listens for a certain CloudEvent Type\n    ```bash\n      kn trigger create cloudevents-player-filter --sink cloudevents-player  --broker example-broker --filter type=some-type\n    ```\n\n    If you send a CloudEvent with type `some-type`, it is reflected in the CloudEvents Player UI.  The Trigger ignores any other types.\n\n    You can filter on any aspect of the CloudEvent you would like to.\n\n\nSome people call this **"Event-Driven Architecture"** which can be used to create your own **"Functions as a Service"** on Kubernetes :tada: :taco: :fire:'}}]);