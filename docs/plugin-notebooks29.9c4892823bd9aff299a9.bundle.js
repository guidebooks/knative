"use strict";(self.webpackChunkKuiClientTemplate=self.webpackChunkKuiClientTemplate||[]).push([[39530],{46113:(n,e,t)=>{t.r(e),t.d(e,{default:()=>i});const i='---\ntitle: Knative &mdash; Introducing Eventing\nlayout:\n    1: left\n---\n\n[![Knative logo](https://knative.dev/docs/images/logo/rgb/knative-logo-rgb.png)](https://knative.dev)\n\n# Knative\n\n[Knative](https://knative.dev) is enterprise-grade Serverless on\nyour own terms, a Kubernetes-based platform to deploy and manage\nmodern serverless workloads.\n\nKnative components build on top of\n[Kubernetes](https://kubernetes.io/), abstracting away the complex\ndetails and enabling developers to focus on what matters. Built by\ncodifying the best practices shared by successful real-world\nimplementations, Knative solves the "boring but difficult" parts of\ndeploying and managing cloud native services so you don\'t have to.\n\n\x3c!-- oof, there is no great way of using markdown to specify a desired image size --\x3e\n\n<a href="https://github.com/knative">\n  <img alt="Github Logo" src="https://avatars.githubusercontent.com/u/26377421?v=4" width="40">\n</a>\n\n---\n\n# Introducing the Knative Eventing\n\n## Background\nWith Knative Serving, we have a powerful tool which can take our containerized code and deploy it with relative ease. **With Knative Eventing, you gain a few new super powers :rocket:** that allow you to build Event-Driven Applications.\n\n??? question "What are Event Driven Applications?"\n    Event-driven applications are designed to detect events as they occur, and then deal with them using some event-handling procedure. Producing and consuming events with an "event-handling procedure" is precisely what Knative Eventing enables.\n\n    Want to find out more about Event-Driven Architecture and Knative Eventing? Check out this CNCF Session aptly named ["Event-driven architecture with Knative events"](https://www.cncf.io/online-programs/event-driven-architecture-with-knative-events/){target=blank}\n\n==**Knative Eventing acts as the "glue" between the disparate parts of your architecture**== and allows you to easily communicate between those parts in a fault-tolerant way. Some examples include:\n\n:material-file-document: [Creating and responding to Kubernetes API events](https://raw.githubusercontent.com/knative/docs/main/docs/eventing/sources/apiserversource/README.md){target=blank}\n\n<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n\x3c!-- Generator: Adobe Illustrator 21.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --\x3e\n\n<svg\n   xmlns:dc="http://purl.org/dc/elements/1.1/"\n   xmlns:cc="http://creativecommons.org/ns#"\n   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"\n   xmlns:svg="http://www.w3.org/2000/svg"\n   xmlns="http://www.w3.org/2000/svg"\n   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"\n   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"\n   version="1.1"\n   id="Layer_1"\n   x="0px"\n   y="0px"\n   viewBox="0 0 71.412065 50"\n   xml:space="preserve"\n   inkscape:version="0.91 r13725"\n   sodipodi:docname="YouTube_full-color_icon (2017).svg"\n   width="15.773"\n   height="11.773"><metadata\n     id="metadata33"><rdf:RDF><cc:Work\n         rdf:about=""><dc:format>image/svg+xml</dc:format><dc:type\n           rdf:resource="http://purl.org/dc/dcmitype/StillImage" /><dc:title></dc:title></cc:Work></rdf:RDF></metadata><defs\n     id="defs31" /><sodipodi:namedview\n     pagecolor="#ffffff"\n     bordercolor="#666666"\n     borderopacity="1"\n     objecttolerance="10"\n     gridtolerance="10"\n     guidetolerance="10"\n     inkscape:pageopacity="0"\n     inkscape:pageshadow="2"\n     inkscape:window-width="1366"\n     inkscape:window-height="715"\n     id="namedview29"\n     showgrid="false"\n     fit-margin-top="0"\n     fit-margin-left="0"\n     fit-margin-right="0"\n     fit-margin-bottom="0"\n     inkscape:zoom="1.3588925"\n     inkscape:cx="-71.668263"\n     inkscape:cy="39.237696"\n     inkscape:window-x="-8"\n     inkscape:window-y="-8"\n     inkscape:window-maximized="1"\n     inkscape:current-layer="Layer_1" /><style\n     type="text/css"\n     id="style3">\n\t.st0{fill:#FF0000;}\n\t.st1{fill:#FFFFFF;}\n\t.st2{fill:#282828;}\n</style><g\n     id="g5"\n     transform="scale(0.58823529,0.58823529)"><path\n       class="st0"\n       d="M 118.9,13.3 C 117.5,8.1 113.4,4 108.2,2.6 98.7,0 60.7,0 60.7,0 60.7,0 22.7,0 13.2,2.5 8.1,3.9 3.9,8.1 2.5,13.3 0,22.8 0,42.5 0,42.5 0,42.5 0,62.3 2.5,71.7 3.9,76.9 8,81 13.2,82.4 22.8,85 60.7,85 60.7,85 c 0,0 38,0 47.5,-2.5 5.2,-1.4 9.3,-5.5 10.7,-10.7 2.5,-9.5 2.5,-29.2 2.5,-29.2 0,0 0.1,-19.8 -2.5,-29.3 z"\n       id="path7"\n       inkscape:connector-curvature="0"\n       style="fill:#ff0000" /><polygon\n       class="st1"\n       points="80.2,42.5 48.6,24.3 48.6,60.7 "\n       id="polygon9"\n       style="fill:#ffffff" /></g></svg>\n[Creating an image processing pipeline](https://www.youtube.com/watch?v=DrmOpjAunlQ){target=blank}\n\n<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n\x3c!-- Generator: Adobe Illustrator 21.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --\x3e\n\n<svg\n   xmlns:dc="http://purl.org/dc/elements/1.1/"\n   xmlns:cc="http://creativecommons.org/ns#"\n   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"\n   xmlns:svg="http://www.w3.org/2000/svg"\n   xmlns="http://www.w3.org/2000/svg"\n   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"\n   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"\n   version="1.1"\n   id="Layer_1"\n   x="0px"\n   y="0px"\n   viewBox="0 0 71.412065 50"\n   xml:space="preserve"\n   inkscape:version="0.91 r13725"\n   sodipodi:docname="YouTube_full-color_icon (2017).svg"\n   width="15.773"\n   height="11.773"><metadata\n     id="metadata33"><rdf:RDF><cc:Work\n         rdf:about=""><dc:format>image/svg+xml</dc:format><dc:type\n           rdf:resource="http://purl.org/dc/dcmitype/StillImage" /><dc:title></dc:title></cc:Work></rdf:RDF></metadata><defs\n     id="defs31" /><sodipodi:namedview\n     pagecolor="#ffffff"\n     bordercolor="#666666"\n     borderopacity="1"\n     objecttolerance="10"\n     gridtolerance="10"\n     guidetolerance="10"\n     inkscape:pageopacity="0"\n     inkscape:pageshadow="2"\n     inkscape:window-width="1366"\n     inkscape:window-height="715"\n     id="namedview29"\n     showgrid="false"\n     fit-margin-top="0"\n     fit-margin-left="0"\n     fit-margin-right="0"\n     fit-margin-bottom="0"\n     inkscape:zoom="1.3588925"\n     inkscape:cx="-71.668263"\n     inkscape:cy="39.237696"\n     inkscape:window-x="-8"\n     inkscape:window-y="-8"\n     inkscape:window-maximized="1"\n     inkscape:current-layer="Layer_1" /><style\n     type="text/css"\n     id="style3">\n\t.st0{fill:#FF0000;}\n\t.st1{fill:#FFFFFF;}\n\t.st2{fill:#282828;}\n</style><g\n     id="g5"\n     transform="scale(0.58823529,0.58823529)"><path\n       class="st0"\n       d="M 118.9,13.3 C 117.5,8.1 113.4,4 108.2,2.6 98.7,0 60.7,0 60.7,0 60.7,0 22.7,0 13.2,2.5 8.1,3.9 3.9,8.1 2.5,13.3 0,22.8 0,42.5 0,42.5 0,42.5 0,62.3 2.5,71.7 3.9,76.9 8,81 13.2,82.4 22.8,85 60.7,85 60.7,85 c 0,0 38,0 47.5,-2.5 5.2,-1.4 9.3,-5.5 10.7,-10.7 2.5,-9.5 2.5,-29.2 2.5,-29.2 0,0 0.1,-19.8 -2.5,-29.3 z"\n       id="path7"\n       inkscape:connector-curvature="0"\n       style="fill:#ff0000" /><polygon\n       class="st1"\n       points="80.2,42.5 48.6,24.3 48.6,60.7 "\n       id="polygon9"\n       style="fill:#ffffff" /></g></svg>\n[Facilitating AI workloads at the edge in large-scale, drone-powered sustainable agriculture projects](https://www.youtube.com/watch?v=lVfJ5WEQ5_s){target=blank}\n\nAs you can see by the mentioned examples, Knative Eventing implementations can range from simplistic to extremely complex. For now, you\'ll start with simplistic and learn about the most basic components of Knative Eventing: Sources, Brokers, Triggers and Sinks.\n'}}]);